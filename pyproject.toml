[project]
name = "red_utils"
version = "0.2.15"
description = "Collection of utility scripts/functions that I use frequently."
authors = [
    { name = "redjax", email = "none@none.com" },
    { name = "redjax", email = "jackenyon@gmail.com" },
]
dependencies = [
    "diskcache>=5.6.1",
    "loguru>=0.7.0",
    "msgpack>=1.0.5",
    "httpx>=0.24.1",
    "pendulum>=2.1.2",
    "rich>=13.5.3",
]
requires-python = ">=3.11"
readme = "README.md"

[project.license]
text = "MIT"

[project.urls]
Repository = "https://github.com/redjax/red-utils"

[project.optional-dependencies]
standard = [
    "diskcache>=5.6.1",
    "loguru>=0.7.0",
    "httpx>=0.24.1",
    "pendulum>=2.1.2",
    "rich>=13.5.3",
    "msgpack>=1.0.5",
    "sqlalchemy>=2.0.21",
]
all = [
    "diskcache>=5.6.1",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "loguru>=0.7.0",
    "httpx>=0.24.1",
    "msgpack>=1.0.5",
    "pendulum>=2.1.2",
    "sqlalchemy>=2.0.21",
    "arrow>=1.3.0",
    "pandas>=2.1.4",
    "fastparquet>=2023.10.1",
]
fastapi = [
    "fastapi>=0.103.1",
    "sqlalchemy>=2.0.21",
    "loguru>=0.7.2",
    "httpx>=0.25.0",
    "msgpack>=1.0.5",
    "uvicorn>=0.23.2",
    "pendulum>=2.1.2",
]
http = [
    "httpx>=0.25.0",
    "diskcache>=5.6.3",
    "loguru>=0.7.2",
    "pendulum>=2.1.2",
    "msgpack>=1.0.5",
    "pendulum>=2.1.2",
]
arrow = ["arrow>=1.3.0"]
data = ["ipykernel>=6.27.1", "pandas>=2.1.4", "fastparquet>=2023.10.1"]
dataframes = ["pandas>=2.1.4", "fastparquet>=2023.10.1"]
ci = ["tox>=4.11.4", "ruff>=0.1.9", "black>=23.12.0", "pytest>=7.4.3"]
documentation = []

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.0.278",
    "pytest>=7.4.0",
    "black>=23.7.0",
    "pre-commit>=3.3.3",
    "pdm-bump>=0.7.3",
    "nox>=2023.4.22",
    "pytest-xdist>=3.5.0",
    "pygments>=2.17.2",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings[python]>=0.24.0",
]

[tool.pdm.scripts.tests]
cmd = "nox -s tests"

[tool.pdm.scripts.git-prune-tags]
cmd = "git fetch --prune origin '+refs/tags/*:refs/tags/*'"

[tool.pdm.scripts.sort-imports]
shell = "pdm run ruff check --select I --fix ."

[tool.pdm.scripts.lint]
# shell = "pdm run black . && pdm run ruff check . --fix"
cmd = "nox -s lint"

[tool.pdm.scripts.lint-ci]
shell = "pdm run black . && RUFF_CONFIG=ruff.ci.toml pdm run ruff check . --fix"

[tool.pdm.scripts.check]
cmd = "black ."

[tool.pdm.scripts.format]
cmd = "ruff check . --fix"

[tool.pdm.scripts.export]
shell = "pdm export --prod -o requirements.txt --without-hashes"

[tool.pdm.scripts.export-dev]
shell = "pdm export -d -o requirements.dev.txt --without-hashes"

[tool.pdm.scripts.export-ci]
shell = "pdm export -G ci -o requirements.ci.txt --without-hashes"

[tool.pdm.scripts.create-major-release]
shell = "pdm bump major && pdm bump tag && pdm lock && pdm build && git push --tags"

[tool.pdm.scripts.create-minor-release]
shell = "pdm bump minor && pdm bump tag && pdm lock && pdm build && git push --tags"

[tool.pdm.scripts.create-micro-release]
shell = "pdm bump micro && pdm bump tag && pdm lock && pdm build && git push --tags"

[tool.pdm.scripts.upload-pypi]
shell = "pdm lock && pdm publish --repository pypi --verbose"

[tool.pdm.scripts.upload-pypi-test]
shell = "pdm lock && pdm publish --repository testpypi --verbose"

[tool.pdm.scripts.mkdocs-build]
cmd = "mkdocs build"

[tool.pdm.scripts.mkdocs-serve]
cmd = "mkdocs serve --dev-addr 0.0.0.0:8000"
