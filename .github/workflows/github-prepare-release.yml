name: Prepare Release

on:
  pull_request:
    branches:
      - main
      - ci
  push:
    branches:
      - topic/ci-testing
      - feat/ci*

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Testing:
    env:
      PYTHONDEVMODE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        ## , windows-latest, macos-latest
        os: [ubuntu-latest]
        install-via: [pip]
        arch: [x64]
        include:
          - python-version: "3.11"
            os: ubuntu-latest
            install-via: script
            arch: x64
          - python-version: "3.11"
            os: windows-latest
            install-via: pip
            arch: x86

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Set Variables
        id: set_variables
        shell: bash
        run: |
          echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_OUTPUT
          echo "PIP_CACHE=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache PIP
        uses: actions/cache@v3
        with:
          path: ${{ steps.set_variables.outputs.PIP_CACHE }}
          key: ${{ runner.os }}-pip-${{ steps.set_variables.outputs.PY }}

      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-

      - name: Install current PDM via pip
        if: matrix.install-via == 'pip'
        run: python -m pip install -U .

      - name: Install current PDM via script
        if: matrix.install-via == 'script'
        run: |
          python -m pip install click
          python install-pdm.py --version head
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dev Dependencies
        run: |
          python -m pip install -U setuptools
          pdm install -v -d
          pdm run pip install -U setuptools
          pdm info

  Pack:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.11"]
        ## , macOS-latest, windows-latest
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Install pdm-pack
        run: |
          pdm self add pdm-pack

      - name: Pack pdm
        run: pdm pack

      - name: Test zipapp
        run: python pdm.pyz --version
