## Get tag version with:
#  ${{ github.event.release.tag_name }}

name: Test Python pipeline

on:
  push:
    branches:
      - topic/ci-testing
  pull_request:
    branches:
      - ci
      - release
    tags:
      - "v*"

jobs:
  testing:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Install dependencies
        run: pdm sync

      - name: Lint with Ruff
        ## Custom script in pyproject.toml
        run: pdm run format

  release:
    needs: testing
    # if: ${{ github.event_name == 'push' && github.ref == 'refs/head/topic/ci-testing' }}
    if: ${{ github.event_name == 'push' }}

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        python-version: ["3.11"]
        ## , macOS-latest, windows-latest
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: Prepare package for release
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git config user.name ${{ secrets.GIT_USERNAME }}
      #     git config user.email ${{ secrets.GIT_EMAIL }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Install dependencies
        run: pdm install

      # - name: Install pdm-bump
      #   run: pdm self add pdm-bump

      - name: Build app
        run: pdm build

      # - name: Bump version
      #   run: |
      #     pdm bump micro

      # - name: Tag release
      #   run: pdm bump tag

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.64.0 # Don't use @master or @v1 unless you're happy to test the latest version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
          WITH_V: true
          PRERELEASE: false

      - name: Create Github tag release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Version ${{ github.ref }} of red-utils
          draft: false
          prerelease: false

      # - name: Python Semantic Release
      #   uses: relekang/python-semantic-release@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     repository_username: __token__
      #     repository_password: ${{ secrets.GITHUB_TOKEN }}
      # repository_username: __token__
      # # repository_password: ${{ secrets.PYPI_TOKEN }}
      # repository_password: ${{ secrets.GITHUB_TOKEN }}
