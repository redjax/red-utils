## Get tag version with:
#  ${{ github.event.release.tag_name }}

name: Test Python pipeline

on:
  push:
    branches:
      - topic/ci-testing
  pull_request:
    branches:
      - ci
      - release
    tags:
      - "v*"

jobs:
  format:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Install dependencies
        run: pdm sync

      - name: Lint with Ruff
        ## Custom script in pyproject.toml
        run: pdm run format

  release:
    needs: format
    if: ${{ github.event_name == 'push' }}
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: read
    strategy:
      matrix:
        python-version: ["3.11"]
        ## , macOS-latest, windows-latest
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          # cache-dependency-path: |
          #   ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Install dependencies
        run: pdm install

      - name: Add pdm-bump
        run: |
          pdm self add pdm-bump

      - name: Build app
        run: pdm build

      - name: Bump pyproject version
        run: |
          pdm bump micro

      - name: Bump tag
        run: |
          pdm bump tag

      - name: Push tag
        run: |
          git config user.name "github-action[bot]"
          git config user.email "github-action[bot]@no-reply.github.com"
          git add pyproject.toml
          git commit -m "Bump version -> ${{ github.event.inputs.version }}"
          git push
          git push --tags

      - name: Create release with changelog
        uses: konfer-be/action-create-release-from-tag@v1.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # - id: release
      #   uses: rymndhng/release-on-push-action@master
      #   with:
      #     bump_version_scheme: patch
      #     tag_prefix: v

      # - name: Check Output Parameters
      #   run: |
      #     echo "Got tag name ${{ steps.release.outputs.tag_name }}"
      #     echo "Got release version ${{ steps.release.outputs.version }}"
      #     echo "Upload release artifacts to ${{ steps.release.outputs.upload_url }}"
