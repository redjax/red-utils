name: Create Release

on:
  pull_request:
    types: [synchronize, opened, reopened, edited, closed]
    branches:
      - release
      - release_pypi-test

env:
  BASE_BRANCH: ${{ github.base_ref }}

jobs:
  create_release:
    name: Create Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: read
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout Repository
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        uses: actions/checkout@v3

      - name: Set up Python v${{ matrix.python-version }}
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install PDM
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          python -m pip install pdm

      - name: Install Dependencies
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          pdm install --no-lock

      ## Add pdm-bump plugin
      - name: Add pdm-bump
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          pdm self add pdm-bump

      - name: Build Application
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          pdm build

      ## Bump the pyproject version (micro is 0.0.x <--)
      - name: Bump pyproject version
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          pdm bump micro

      ## Create a tag from version bump
      - name: Bump tag
        if: >
          ${{
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
            || contains(github.event.*.labels.*.name, 'release-pypi')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        run: |
          pdm bump tag

      ## This is supposed to get the most recent tag, but it doesn't
      #  and I don't want to spend any more time trying to get this to work.
      - name: Get branch name for commit
        id: tag_version
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      ## Push tag to repo
      - name: Push tag
        run: |
          git config user.name "github-action[bot]"
          git config user.email "github-action[bot]@no-reply.github.com"
          git add pyproject.toml
          git commit -m "Bump version from ${{ steps.tag_version.outputs.stdout }}"
          git push
          git push --tags

      - name: Publish to PyPI
        if: >
          ${{
            startsWith(github.ref, 'refs/heads/release') &&
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-pypi')
          }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install twine
          twine upload --repository-url https://upload.pypi.org/legacy/ dist/*

      - name: Publish to Test PyPI
        if: >
          ${{
            startsWith(github.ref, 'refs/heads/release_pypi-test') &&
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-pypi-test')
          }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m pip install twine
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*

      - name: Create GitHub Release
        if: >
          ${{
            startsWith(github.ref, 'refs/heads/release') &&
            contains(github.event.*.labels.*.name, 'release-all')
            || contains(github.event.*.labels.*.name, 'release-github')
          }}
        uses: softprops/action-gh-release@v3
        with:
          files: dist/*
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            This is an automated release created by the GitHub Actions workflow.
